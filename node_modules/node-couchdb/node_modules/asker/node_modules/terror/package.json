{
  "name": "terror",
  "version": "1.3.0",
  "description": "Base error class which will help you grep logs more effectively",
  "main": "./lib/terror.js",
  "scripts": {
    "test": "jshint lib test && jscs lib test && mocha test",
    "coverage": "mkdir -p coverage && unit-coverage -s lib/*.js -t test/*.js -r html -o ./coverage/index.html run"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/nodules/terror.git"
  },
  "keywords": [
    "error"
  ],
  "author": {
    "name": "Ruslan Kerimov",
    "email": "orion@yandex-team.ru",
    "url": "https://github.com/ruslankerimov"
  },
  "maintainers": [
    {
      "name": "Phillip Kovalev",
      "email": "twilightfeel@gmail.com",
      "url": "https://github.com/kaero"
    }
  ],
  "contributors": [
    {
      "name": "Phillip Kovalev",
      "email": "twilightfeel@gmail.com",
      "url": "https://github.com/kaero"
    },
    {
      "name": "Dmitriy Vinokurov",
      "email": "vinokuroff.dm@gmail.com",
      "url": "https://github.com/vindm"
    },
    {
      "name": "Igor Shevchenko",
      "url": "https://github.com/cy6erskunk"
    },
    {
      "name": "Nikita Ezhkov",
      "url": "https://github.com/nikita-ezhkov"
    },
    {
      "name": "Konstantin Chernenko",
      "url": "https://github.com/zoobestik"
    },
    {
      "name": "Vladislav Kurkin",
      "email": "b-vladi@cs-console.ru",
      "url": "https://github.com/B-Vladi"
    },
    {
      "name": "Vladimir Varankin",
      "email": "nek.narqo@gmail.com",
      "url": "https://github.com/narqo"
    }
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/nodules/terror/raw/master/LICENSE"
    }
  ],
  "readmeFilename": "README.md",
  "devDependencies": {
    "chai": "^2.2.0",
    "jscs": "^1.12.0",
    "jshint": "^2.1.0",
    "mocha": "^2.2.1",
    "sinon": "^1.14.1",
    "unit-coverage": "^3.4.0"
  },
  "readme": "Terror [![NPM version][npm-image]][npm-link] [![Build Status][build-image]][build-link]\n======\n\n[![Development Dependency status][devdeps-image]][devdeps-link]\n\nBase error class which will help you organize errors, generate informative logs and as result grep logs more effectively.\n\n## Trivial usage\n\n```javascript\nvar Terror = require('terror'),\n\n    // declare error type with custom error codes and messages\n    MyError = Terror.create('MyError', {\n        STRANGE_THING_HAPPENS: 'Something strange happens'\n    });\n\ntry {\n    // ...\n\n    if (typeof userInput === 'undefined') {\n        // throw error\n        throw new MyError(MyError.CODES.STRANGE_THING_HAPPENS);\n        // or\n        // throw MyError.createError(MyError.CODES.STRANGE_THING_HAPPENS);\n    }\n} catch (err) {\n    // ensureError method returns err if it is an instance of MyError,\n    // otherwise wrap Error instance in the MyError with default code UNKNOWN_ERROR\n    MyError.ensureError(err)\n        .log();\n}\n```\n\n## Constructor\n\n```javascript\nnew Terror(code, originalError);\nnew Terror(code, message);\nnew Terror(code);\nnew Terror();\n```\n\nAlso can be called as a function, then calls self as the constructor internally and returns created instance.\n\nBoth arguments are not required:\n * if only `code` passed, message will got from `Terror.MESSAGES` hash by the `code` value as the key;\n * if `code` is absent, will be used default value `Terror.CODES.UNKNOWN_ERROR`.\n\n## Constructor methods\n\n### create(name, codes)\n\nReturns constructor inherited from Terror. You must specify `name` for logging purpose.\n\nArguments:\n * `{String} name` – Error class name for logging;\n * `{Object} [codes]` - CODES hash { CODE_NAME: 'error message', … }\n\nExample:\n```javascript\nvar AppError = Terror.create('AppError'),\n    ControllerError = AppError.create('ControllerError', {\n        IO_ERROR: 'Broken IO',\n        FS_ERROR: 'Broken %fsName% file-system'\n    });\n```\n\n### extendCodes(codes)\n\nExtends `CODES` and associated `MESSAGES` hashes using `codes` declaration. Method throws an error if codes uniqueness violated by extension.\n\nExample:\n```javascript\nvar AppError = Terror\n        .create('AppError')\n        .extendCodes({\n                BROKEN_CONFIG: 'Looks like configuration file is broken.',\n                DB_CONNECTION_FAILED: 'Can not connect to database %db_host%'\n        });\n\n// now you can use AppError.CODES.BROKEN_CONFIG & AppError.CODES.DB_CONNECTION_FAILED to produce errors\nnew AppError(AppError.CODES.BROKEN_CONFIG);\n```\n\n### setLogger(logger)\n\nSet function which error class and its inheritors will use for logging.\nIt called by `log` method with two arguments: `message` and `level`.\n\nExample:\n```javascript\nvar log = [],\n    logger = function(message, level) {\n        log.push([ new Date(), level, message ].join());\n    },\n    MyError = Terror.create('MyError').setLogger(logger);\n\nMyError.createError().log();\n\nconsole.log(log.join('\\n'));\n```\n\n### createError(code, message | originalError | data)\n\nCreates new `Terror` or its inheritor instance.\n\nArguments:\n* `{Number} [code]` – error code from `CODES` hash, `Terror.CODES.UNKNOWN_ERROR` used as default value;\n* `{String|Error|Terror|Object} [message|originalError|data]`\n** if 2nd argument is String then use it as original error message;\n** if 2nd argument is Error then use its message and call-stack to format original message;\n** if 2nd argument is an Object then replace error message placeholders with provided data.\n\nExample:\n```javascript\nvar MyError = Terror.create('MyError', {\n        IO_ERROR: 'Broken IO',\n        FS_ERROR: 'Broken %fsName% file-system'\n    });\n\n// valid createError calls\n\n// \"UNKNOWN_ERROR Terror: Unknown error\"\nTerror.createError();\n\n// same as above\nTerror.createError(Terror.CODES.UNKNOWN_ERROR);\n\n// \"UNKNOWN_ERROR MyError: Unknown error\"\nMyError.createError();\n\n// \"IO_ERROR MyError: Broken IO\"\nMyError.createError(MyError.CODES.IO_ERROR);\n\n// \"IO_ERROR MyError: Broken IO (Error: kbd int broken)\"\nMyError.createError(MyError.CODES.IO_ERROR, new Error('kbd int broken'));\n\n// \"FS_ERROR MyError: Broken vfat file-system\"\nMyError.createError(MyError.CODES.FS_ERROR, { fsName: 'vfat' });\n\n// fails, because code IO_ERROR is not defined for Terror\nTerror.createError(MyError.CODES.IO_ERROR);\n```\n\n### ensureError(originalError, code)\n\nReturns `originalError` if it's an instance of the owning class.\nOtherwise wrap `originalError` into new owning class instance using `code` or `UNKNOWN_ERROR` code if second argument is absent.\n\nExample:\n```javascript\nvar MyError = Terror.create('MyError', {\n        EMPTY_MESSAGE: 'Message string is empty',\n        UNEXPECTED_ERROR: 'Unexpected error'\n    }),\n    arr = [ { msg: \"hello\" }, { msg: \"\" }, {} ];\n\narr.forEach(function(item) {\n    try {\n        if (item.msg.length > 0) {\n            console.log(item.msg);\n        } else {\n            throw MyError.createError(MyError.CODES.EMPTY_MESSAGE);\n        }\n    } catch (err) {\n        throw MyError.ensureError(err, MyError.CODES.UNEXPECTED_ERROR)\n            .log(); // logging like MyError instance\n    }\n})\n```\n\n### isTerror(error)\n\nChecks whether the `error` is an instance of Terror class.\n\nExample:\n```javascript\nvar err = new Error('average error here');\nTerror.isTerror(err) === false;\n\nvar terr = Terror.ensureError(err);\nTerror.isTerror(terr) === true;\n```\n\n### is(code, error)\n\nChecks whether the `error` is an instance of the context class and an error code equals the passed one.\n\nExample:\n```javascript\nvar MyError = Terror.create('MyError', {\n        XCODE: 'code X',\n        ZCODE: 'code Z'\n    });\n\nMyError.is(MyError.CODES.XCODE, MyError.createError(MyError.CODES.XCODE)); // => true\nMyError.is(MyError.CODES.ZCODE, MyError.createError(MyError.CODES.XCODE)); // => false\nMyError.is(MyError.CODES.XCODE, Terror.createError()); // => false\n```\n\n## Methods of prototype\n\n### log(level)\n\nLog error with specified `level`. If method called twice or more for the same instance, logger will be called by first `log` call only.\n\nArguments:\n* `{*} [level=constructor.DEFAULT_LOG_LEVEL]` – any type accepted by logger.\n\nExample:\n```javascript\nvar Terror = require('terror'),\n    terr;\n\nTerror.DEFAULT_LOG_LEVEL = 'INFO';\n\ntry {\n    console.lag(\"hello!\");\n} catch (err) {\n    terr = Terror.ensureError(err);\n    terr.log()\n        .log('warn')\n        .log('error');\n}\n```\n\n`terr` will be logged once with 'INFO' error level.\n\n### bind(data)\n\nFill an error message with values from `data` object properties.\n\nArguments:\n* `{Object} data` – hash, where key is a placeholder name to be replaced, value – a data to replace with.\n\nExample:\n```javascript\nvar IOError = Terror.create('MyError', {\n        IO_ERROR: 'Broken IO pipe \"%pipe%\"'\n    });\n\nIOError.createError(IOError.CODES.IO_ERROR)\n    .bind({ pipe: 'main bus' })\n    .log('PANIC');\n// or\nIOError.createError(IOError.CODES.IO_ERROR, { pipe: 'main bus' })\n    .log('PANIC');\n```\n\n## Internal, but useful prototype methods\n\nFollowing methods used by built-in logger routine, but may be useful for any simple text logger.\n\n### logMultilineError(message, level, logger)\n\nFormats error message and calls `logger(formattedMessage)`.\n\nFormatting is optimized for output call-stacks to the text files and future grep through.\n\nFormat:\n```\nLEVEL CODE CLASS: MESSAGE\n>>>>>   CALL STACK ROW 1\n…\n>>>>>   CALL STACK ROW N\n```\n\nExample:\n```\nERROR UNKNOWN_ERROR Terror: Unknown error (TypeError: Object #<Console> has no method 'lag')\n>>>>>     at repl:2:9\n>>>>>     at REPLServer.self.eval (repl.js:110:21)\n>>>>>     at repl.js:249:20\n>>>>>     at REPLServer.self.eval (repl.js:122:7)\n>>>>>     at Interface.<anonymous> (repl.js:239:12)\n>>>>>     at Interface.EventEmitter.emit (events.js:95:17)\n>>>>>     at Interface._onLine (readline.js:202:10)\n>>>>>     at Interface._line (readline.js:531:8)\n>>>>>     at Interface._ttyWrite (readline.js:754:14)\n>>>>>     at ReadStream.onkeypress (readline.js:99:10)\n```\n\n[npm-image]: https://img.shields.io/npm/v/terror.svg?style=flat\n[npm-link]: https://npmjs.org/package/terror\n[build-image]: https://img.shields.io/travis/nodules/terror.svg?style=flat\n[build-link]: https://travis-ci.org/nodules/terror\n[devdeps-image]: https://img.shields.io/david/dev/nodules/terror.svg?style=flat\n[devdeps-link]: https://david-dm.org/nodules/terror#info=devDependencies\n",
  "bugs": {
    "url": "https://github.com/nodules/terror/issues"
  },
  "homepage": "https://github.com/nodules/terror",
  "_id": "terror@1.3.0",
  "dist": {
    "shasum": "34d81a9572e63542cf258c2fe011c61702ddb014"
  },
  "_from": "terror@^1.0.0",
  "_resolved": "https://registry.npmjs.org/terror/-/terror-1.3.0.tgz"
}
